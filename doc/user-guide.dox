
/**
@page User_Guide User Guide

	@section TABLE_OF_CONTENTS TABLE OF CONTENTS
	-# @ref GENERAL_INFORMATION
		-# @ref Overview
		-# @ref Acronyms_and_Abbreviations
	-# @ref SETUP_AND_DATA_FLOWS
		-# @ref Setup
		-# @ref Data_Flows
	-# @ref INSTALLATION_AND_UPGRADE
		-# @ref Requirements
		-# @ref Supported_Platforms
		-# @ref Installation
		-# @ref Upgrading
		-# @ref Important_Files
		-# @ref Tips_And_Tricks
	-# @ref GETTING_STARTED
		-# @ref Starting
		-# @ref Running
		-# @ref Exiting
		-# @ref Exceptions
		
	@htmlonly
	<hr>
	@endhtmlonly		
	@section GENERAL_INFORMATION GENERAL INFORMATION
	
		@subsection Overview Overview
		
		    The Monitoring package is a library that allows for O2 processes to:
		        - monitor process metrics such as CPU, memory, etc.
		        - monitor application-specific metrics (e.g. internal buffers usage, # of processed events, etc)  
		        
		    This library currently provides the following classes:
		    
		        - DataCollector: simple class that allows applications to print application-specific values to stdout
		        - DataCollectorApMon: uses ApMon to push application-specific data into a MonALISA Service. 
		                              Additionally, it allows process monitoring of several key system metrics. 

            2 examples (sampleCollectorStdout.cxx and sampleCollectorApMon.cxx) in src show how to use these classes.
		    
		    In the future, other server-side tools might be used.
			
		@subsection Acronyms_and_Abbreviations Acronyms and Abbreviations
		
			- MonALISA: Monitoring Agents using a Large Integrated Services Architecture

	@htmlonly
	<hr>
	@endhtmlonly
	@section SETUP_AND_DATA_FLOWS SETUP AND DATA FLOWS
	
		@subsection Setup Setup
		
		    For the simple DataCollector class, no setup is needed.
		    
		    For the MonALISA/ApMon based class, each process sends its own list of monitoring values to a MonALISA 
		    Service running on the same or on a remote host. The values are sent over UDP using the ApMon library.
		    For the FLP prototype development, the setup is the following
		
			@dot
				digraph Data {
					node [shape=record];
					monalisa [label="MonALISA Service\n(aidrefflp01)"];
					aidrefflp01 [label="{<f0> aidrefflp01\n\n|{<f1> P1|<f2> P2|<f3> P3| ...}}"];
					aidrefflp02 [label="{<f0> aidrefflp02\n\n|{<f1> P1|<f2> P2|<f3> P3| ...}}"];
					aidrefflp01:f1 -> monalisa;
					aidrefflp01:f2 -> monalisa;
					aidrefflp01:f3 -> monalisa;
					aidrefflp02:f1 -> monalisa;
					aidrefflp02:f2 -> monalisa;
					aidrefflp02:f3 -> monalisa;
			  }
			@enddot

            The system monitoring is performed by the MonALISA Service via pull.
			
		@subsection Data_Flows Data Flows
							
			Inside a process, 2 types of monitoring values exist:
			
			  - Process monitoring: metrics like CPU usage, memory, etc. Done automatically by ApMon in a dedicated thread if the xApMon_job_monitoring option is set to On in the ApMon configuration file.
			  - Application monitoring: application specific metrics, must be sent explicitly by the process via a call to sendValue(...).
			  
			@dot  
			  digraph DataFlow{
			    splines=false;
			    node[shape=record]
			    subgraph level0{
			      monalisa [label="MonALISA Service" shape=box];
			      udp1 [label="UDP" shape=ellipse];
			      udp2 [label="UDP" shape=ellipse];
			    }
			    subgraph cluster_level1{
			      label ="O2 Process";
			      process_mon [label="{<f0> ApMon Thread|<f1> \nProcess\nMonitoring\n}" shape=Mrecord];
			      application_mon [label="{<f0> Main Thread |<f1> \nApplication\nMonitoring\n}" shape=Mrecord];
                }
			    process_mon -> udp1 -> monalisa  
			    application_mon -> udp2 -> monalisa
		 	  }
			@enddot
				
	@htmlonly
	<hr>
	@endhtmlonly
	@section INSTALLATION_AND_UPGRADE INSTALLATION AND UPGRADE
	
		@subsection Requirements Requirements
		
		    - MonALISA Service
		    - MonALISA Client (for visualization)
			- ApMon library			
			
		@subsection Supported_Platforms Supported Platforms
		
			- SLC6
		
		@subsection Installation Installation
		
			- Linux
			  - To install and configure the MonALISA service (1 central server):
                - yum install monalisa-service
                - copy config/ml_env to /opt/monalisa-service/Service/CMD/
                - copy config/ml.properties to /opt/monalisa-service/Service/myFarm/
                - copy config/myFarm.conf to /opt/monalisa-service/Service/myFarm/
                - add following line to iptables and restart it: -A INPUT -p udp -m state --state NEW -m udp --dport 8884 -m comment --comment "MonALISA UDP packets" -j ACCEPT
                - /sbin/service MLD start
                
              - To install the MonALISA Client
                - yum install monalisa-client
 
              - To use the library (on each node that runs O2 processes):
                - yum install ApMon_cpp
                - add /usr/local/lib to LD_LIBRARY_PATH (e.g. export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib)
					
		@subsection Upgrading Upgrading
		
			- Upgrading Manually
			- Rolling Back an Upgrade
			
		@subsection Important_Files Important Directories and Files
		
			- MonALISA Service
			  - Log file: /opt/monalisa-service/Service/myFarm/ML0.log
			  - Log file: /opt/monalisa-service/Service/myFarm/ML.log
			  - Config file: /opt/monalisa-service/Service/myFarm/ml.properties
			  - Config file: /opt/monalisa-service/Service/myFarm/myFarm.conf
			  			  		
		@subsection  Tips_And_Tricks Tips, Tricks, and Best Practices
		
			- The MonALISA Service only keeps values in memory. Therefore:
			  - Everytime we restart the MonALISA Service we will loose the historical record.
			  - The values available are limited to a few hours. 
			  - If you want to keep the plots for future reference, use the MonALISA Client and save the plots as images. 
			  - The MonALISA Repository provides the historical record feature. For the time being it will NOT be installed.			
	
	@htmlonly
	<hr>
	@endhtmlonly
	@section GETTING_STARTED GETTING STARTED
				
		@subsection Starting Starting
		
			A working example is available in apps/samplecollector.
			In a nutshell:
			
			\code
			   ...
			   namespace Monitoring = AliceO2::Monitoring;
			   ... 
			   // configFile is path to config file
			   // FLPs is the name of the cluster
			   // FLP-TPC-01 is the node name to be used for the process monitoring metrics (if option xApMon_job_monitoring=On in the config file)
			   //
			   // This call will start the process monitoring 
               Monitoring::Core::DataCollector *collector = new Monitoring::Core::DataCollector(configFile, "FLPs", "FLP-TPC-01");
               ...
               ...
               // now I send an application specific metric
               collector->sendValue("FLPs", "FLP-TPC-01", "myCrazyMetric", 10);
               ...
			\endcode
		
		@subsection Running Running
		
		    - Library
			  - Make sure that your LD_LIBRARY_PATH includes /usr/local/lib (location of ApMon)
			- MonALISA Service
			  - /sbin/service MLD start/stop/restart
			- MonALISA Client
			  - Execute /usr/bin/javaws /opt/monalisa-client/MonaLisaNo3D.jnlp
			  - Say next->next->next...
			  - Once the GUI is launched:
			    - Top menu: Groups->Unselect all
                - Top menu: Groups->alice-o2
                - Side menu: Groups, then expand alice-o2 and then expand flp-prototype
                - In the Clusters section, select the cluster and node you want to see
			    		
		@subsection Exiting Exiting
				
		@subsection Exceptions Caveats and Exceptions		  
*/
