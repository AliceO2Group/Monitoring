sudo: required
language: cpp
dist: trusty
matrix:
  allow_failures:
    - os: linux
      env: TOOL=clang-format
      addons:
        apt:
          sources: *sources
          packages: ['clang-format-3.9']
      compiler: clang
  include:
    - os: osx
      osx_image: xcode9.2
      env: TOOL=test
    - os: linux
      env: TOOL=test
      addons:
        apt:
          sources:
           - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - cmake
            - libboost-all-dev
    - os: linux
      env: TOOL=coverage
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - lcov
            - gcc-8
            - g++-8
            - cmake
            - doxygen
            - doxygen-doc
            - doxygen-latex
            - doxygen-gui
            - graphviz
            - libboost-all-dev
      branches:
        only:
          - dev
      deploy:
        provider: pages
        skip_cleanup: true
        github_token: $GITHUB_API_TOKEN
        local_dir: build/doc/html
        on:
          branch: dev
before_install:
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cd ..; wget https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.gz; fi
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then tar xf boost_1_64_0.tar.gz; cd $TRAVIS_BUILD_DIR; fi
install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 90; fi
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cd ../boost_1_64_0; ./bootstrap.sh --with-libraries=test,program_options,system,filesystem; fi
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo ./b2 -j 4 install > /dev/null 2>&1; cd $TRAVIS_BUILD_DIR; fi
before_script: 
  - mkdir build; cd build
script:
  - if [[ $TOOL != "coverage" ]]; then cmake .. -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/installed;
                                  else cmake .. -DCMAKE_BUILD_TYPE=Debug; fi
  - if [[ $TOOL == "test" ]] || [[ $TOOL == "coverage" ]]; then make -j; fi
  - if [[ $TOOL == "test" ]] || [[ $TOOL == "coverage" ]]; then make test; fi
  - if [[ $TOOL == "test" ]]; then make install; fi
  - if [[ $TOOL == "coverage" ]]; then make doc; fi
  - if [[ $TOOL == "clang-format" ]] && [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
      cd $TRAVIS_BUILD_DIR;
      BASE_COMMIT=$(git rev-parse $TRAVIS_BRANCH);
      COMMIT_FILES=$(git diff --name-only $BASE_COMMIT | grep -i -v LinkDef);
      curl -O https://raw.githubusercontent.com/AliceO2Group/CodingGuidelines/master/.clang-format;
      RESULT_OUTPUT="$(git-clang-format-3.9 --commit $BASE_COMMIT --diff --binary `which clang-format-3.9` $COMMIT_FILES)";
      if [ "$RESULT_OUTPUT" == "no modified files to format" ] || [ "$RESULT_OUTPUT" == "clang-format did not modify any files" ]; then
        echo "clang-format passed";
        exit 0;
      else
        echo "clang-format failed.";
        echo "$RESULT_OUTPUT";
        exit 1;
      fi
    fi
after_success:
  - if [[ $TOOL == "coverage" ]]; then cd ${TRAVIS_BUILD_DIR}/build; fi
  - if [[ $TOOL == "coverage" ]]; then lcov --directory . --capture --output-file coverage.info; fi
  - if [[ $TOOL == "coverage" ]]; then lcov --remove coverage.info '/opt/*' '/usr/*' --output-file coverage.info; fi
  - if [[ $TOOL == "coverage" ]]; then lcov --list coverage.info; fi
  - if [[ $TOOL == "coverage" ]]; then bash <(curl -s https://codecov.io/bash) || echo "No coverage reports"; fi
notifications:
  email: false
